# -*- coding: utf-8 -*-
"""Shopify Intern Challenge - Saloni Sharma.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14x8XK96OLADQoQpLgZo8rr4J_5feUczO

# Fall 2022 Data Science Intern Challenge

# Question 1: 

Given some sample data, write a program to answer the following: click here to access the required data set

On Shopify, we have exactly 100 sneaker shops, and each of these shops sells only one model of shoe. We want to do some analysis of the average order value (AOV). When we look at orders data over a 30 day window, we naively calculate an AOV of $3145.13. Given that we know these shops are selling sneakers, a relatively affordable item, something seems wrong with our analysis. 

Think about what could be going wrong with our calculation. Think about a better way to evaluate this data. 
What metric would you report for this dataset?
What is its value?
"""

# Importing required files
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Mounting the google drive to import the data
from google.colab import drive
drive.mount('/content/drive')

# Reading the data into pandas dataframe
df = pd.read_csv('/content/drive/My Drive/Colab Notebooks/Shopify Intern Challenge/2019 Winter Data Science Intern Challenge Data Set.csv')
df.head()

# Doing a quick sanity check
print("AOV as per the method provided in the question is {}".format(round(sum(df.order_amount)/len(df.order_amount))))

"""# Solution 1a :
The problem with this calculation is the following:

1.   The average is not taking into account the quantity of shoes that are being sold on a particular day.

2.   Average as a statistic is inherently prone to outliers. Extremely high or low values could skew the average towards their direction


"""

# The orders having high amount

df[df['order_amount']>1000]

"""# Observations:

On inspecting the above rows 

1. Store 42 is selling a large amount of sneakers approximately 2000 in some of the orders. Probably a bulk order has been placed by some other local retailer. 
2. Store 78 is selling a pair of sneaker at a really high price - 25,725 compared to all other stores

These orders could sway the average and result in a number which is not realistic for any kind of business decisions

# Solution 1b

In order to evaluate the data correctly such that the metric reports the right AOV that could be useful for making useful decisions we need to use a statistic that is not prone to outliers like Median. However, in this case we need to consider the quantity sold as well. Thus we can do the following:

1.   Find price of one pair of sneakers by dividing the order_amount by total_items sold in each individual orders

2.   Find the median across this newly created metric. The average would still sway since there is a store that is selling one pair of shoes at 25k.
"""

# Creating column with price of one pair in every order
df['Price_per_shoe'] = df['order_amount'] / df['total_items']
df['Price_per_shoe']

# Median price across all the shoes

np.median(df['Price_per_shoe'])

"""# Solution 1c

The median value of price per shoe across all the orders comes out to be $153$. This value could help in understanding which stores are selling the shoes at very low or higher prices.

#Question 2: 

For this question youâ€™ll need to use SQL. Follow this link to access the data set required for the challenge. Please use queries to answer the following questions. Paste your queries along with your final numerical answers below.



1.   How many orders were shipped by Speedy Express in total?
2.   What is the last name of the employee with the most orders?
3.   What product was ordered the most by customers in Germany?

# Solution 2a:

SQL Query:

select count(*) as Number_of_Orders

from Orders A 

left join Shippers B

on A.ShipperID = B.ShipperID

where ShipperName = 'Speedy Express';

Output:

The total number of orders shipped by Speedy Express is $54$

# Solution 2b:

SQL Query:

select B.LastName 

from 

(select EmployeeID,count(OrderID) as Number_of_Orders 

from Orders

group by EmployeeID

order by Number_of_Orders desc

limit 1) A

left join 

Employees B

on A.EmployeeID = B.EmployeeID;


Output:


The last name of the employee who has the maximum number of orders (40) is Peacock

# Solution 2c:

SQL Query:

SELECT ProductName

FROM Orders

left join Customers

on Orders.CustomerID = Customers.CustomerID

left join OrderDetails 

on Orders.OrderID = OrderDetails.OrderID

left join Products 

on OrderDetails.ProductID = Products.ProductID

where Country = 'Germany'

group by ProductName

order by sum(Quantity) desc

limit 1;



Output:


The product that was ordered the most by customers in Germany was Boston Crab Meat (this is based on the quantity ordered by the customers)
"""